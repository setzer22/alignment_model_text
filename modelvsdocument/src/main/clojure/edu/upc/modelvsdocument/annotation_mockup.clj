(ns edu.upc.modelvsdocument.annotation-mockup
  (:require [clojure.data.csv :as csv]
            [edu.upc.modelvsdocument.utils :as utils :refer :all]
            [edu.upc.modelvsdocument.text :as text]
            [clojure.pprint :as pprint]
            [com.rpl.specter :as specter :refer :all]
            [clojure.java.io :as io]))

(def order-matrix
  {"Hospital"
   [[:!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :!= :-> :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :<- :!= :!=]
    [:<- :<- :<- :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :<- :!= :!=]
    [:<- :<- :!= :!= :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :<- :-> :->]
    [:<- :<- :!= :!= :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :<- :-> :->]
    [:<- :<- :!= :!= :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :<- :-> :->]
    [:<- :<- :!= :!= :<- :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :<- :-> :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :<- :<- :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :<- :<- :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :<- :<- :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :<- :<- :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :!= :<- :<- :<- :<- :<- :<- :<- :<- :<- :<-]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :-> :!= :-> :-> :-> :-> :-> :-> :<- :<- :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :-> :<- :!= :-> :-> :-> :-> :-> :<- :<- :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :-> :<- :<- :!= :-> :-> :-> :-> :<- :<- :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :-> :<- :<- :<- :!= :-> :-> :-> :<- :<- :<-]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :-> :<- :<- :<- :<- :!= :-> :-> :<- :<- :<-]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :-> :<- :<- :<- :<- :<- :!= :-> :<- :<- :<-]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :-> :<- :<- :<- :<- :<- :<- :!= :<- :<- :<-]
    [:<- :<- :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :!= :-> :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :<- :!= :->]
    [:<- :<- :!= :!= :<- :<- :<- :<- :<- :<- :<- :<- :-> :<- :<- :<- :-> :-> :-> :-> :<- :<- :!=]]

   "Zoo"
   [[:!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :-> :!= :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :!= :!= :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :!= :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :!= :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :!= :|| :-> :-> :-> :-> :-> :-> :|| :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :|| :!= :|| :|| :|| :|| :|| :|| :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :|| :!= :-> :-> :-> :-> :-> :|| :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :|| :<- :!= :-> :-> :-> :-> :|| :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :|| :<- :<- :!= :-> :-> :-> :|| :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :|| :<- :<- :<- :!= :-> :-> :|| :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :|| :<- :<- :<- :<- :!= :-> :|| :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :|| :<- :<- :<- :<- :<- :!= :|| :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :|| :<- :|| :|| :|| :|| :|| :|| :!= :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!=]]

   "Dispatch_of_Goods"
   [[:!= :-> :-> :-> :-> :-> :-> :-> :-> :|| :->]
    [:<- :!= :-> :-> :-> :!= :!= :-> :-> :|| :->]
    [:<- :<- :!= :-> :-> :!= :!= :-> :-> :|| :->]
    [:<- :<- :<- :!= :-> :!= :!= :-> :-> :|| :->]
    [:<- :<- :<- :<- :!= :!= :!= :-> :-> :|| :->]
    [:<- :!= :!= :!= :!= :!= :-> :-> :-> :|| :->]
    [:<- :!= :!= :!= :!= :<- :!= :-> :-> :|| :->]
    [:<- :<- :<- :<- :<- :<- :<- :!= :-> :|| :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :!= :|| :->]
    [:|| :|| :|| :|| :|| :|| :|| :|| :|| :!= :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!=]]

   "Credit_scoring"
   [[:!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :!= :-> :-> :!= :!= :!= :!= :!= :->]
    [:<- :<- :<- :!= :-> :!= :!= :!= :!= :!= :->]
    [:<- :<- :<- :<- :!= :!= :!= :!= :!= :!= :->]
    [:<- :<- :!= :!= :!= :!= :-> :-> :-> :-> :->]
    [:<- :<- :!= :!= :!= :<- :!= :-> :-> :-> :->]
    [:<- :<- :!= :!= :!= :<- :<- :!= :-> :|| :->]
    [:<- :<- :!= :!= :!= :<- :<- :<- :!= :-> :->]
    [:<- :<- :!= :!= :!= :<- :<- :|| :<- :!= :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!=]]

   "WebFrontend"
   [[:!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :!= :-> :|| :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :|| :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :|| :|| :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :!= :-> :!= :!= :!= :!= :!= :!= :!= :!=]
    [:<- :<- :<- :<- :<- :<- :<- :!= :!= :!= :!= :!= :!= :!= :!= :!=]
    [:<- :<- :<- :<- :<- :<- :!= :!= :!= :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :!= :!= :<- :!= :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :!= :!= :<- :<- :!= :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :!= :!= :<- :<- :<- :!= :-> :!= :!= :!=]
    [:<- :<- :<- :<- :<- :<- :!= :!= :<- :<- :<- :<- :!= :!= :!= :!=]
    [:<- :<- :<- :<- :<- :<- :!= :!= :<- :<- :<- :!= :!= :!= :-> :->]
    [:<- :<- :<- :<- :<- :<- :!= :!= :<- :<- :<- :!= :!= :<- :!= :->]
    [:<- :<- :<- :<- :<- :<- :!= :!= :<- :<- :<- :!= :!= :<- :<- :!=]]

   "CreditRating"
   [[:!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :-> :!= :!= :!= :!= :!= :!=]
    [:<- :<- :<- :<- :!= :!= :!= :!= :!= :!= :!=]
    [:<- :<- :<- :!= :!= :!= :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :!= :<- :!= :-> :-> :-> :->]
    [:<- :<- :<- :!= :!= :<- :<- :!= :|| :-> :->]
    [:<- :<- :<- :!= :!= :<- :<- :|| :!= :-> :->]
    [:<- :<- :<- :!= :!= :<- :<- :<- :<- :!= :->]
    [:<- :<- :<- :!= :!= :<- :<- :<- :<- :<- :!=]]

   "Hotel"
   [[:!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :!= :|| :|| :|| :|| :|| :|| :-> :-> :-> :-> :-> :->]
    [:<- :<- :|| :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :|| :<- :!= :|| :|| :|| :|| :-> :-> :-> :-> :-> :->]
    [:<- :<- :|| :<- :|| :!= :|| :|| :|| :-> :-> :-> :-> :-> :->]
    [:<- :<- :|| :<- :|| :|| :!= :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :|| :<- :|| :|| :<- :!= :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :|| :<- :|| :|| :<- :<- :!= :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :-> :-> :-> :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :-> :!= :!=]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :<- :<-]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :-> :!= :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :-> :<- :!=]]

   "Court_Hearing"
   [[:!= :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :-> :!= :-> :-> :-> :->]
    [:<- :<- :!= :!= :-> :-> :-> :->]
    [:<- :!= :!= :!= :-> :-> :-> :->]
    [:<- :<- :<- :<- :!= :-> :-> :->]
    [:<- :<- :<- :<- :<- :!= :|| :->]
    [:<- :<- :<- :<- :<- :|| :!= :->]
    [:<- :<- :<- :<- :<- :<- :<- :!=]]

   "Emergency_Hospital"
   [[:!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :!= :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :!= :->]
    [:<- :<- :<- :!= :!= :-> :-> :|| :|| :|| :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :<- :!= :-> :|| :|| :|| :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :<- :<- :!= :|| :|| :|| :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :|| :|| :|| :!= :|| :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :|| :|| :|| :|| :!= :-> :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :|| :|| :|| :<- :<- :!= :-> :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :<- :<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :<- :<- :<- :<- :<- :<- :<- :!= :-> :-> :-> :-> :->]
    [:<- :<- :<- :!= :<- :<- :<- :<- :<- :<- :<- :<- :!= :-> :-> :-> :->]
    [:<- :<- :<- :!= :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :!= :!= :->]
    [:<- :<- :<- :!= :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :!= :!= :->]
    [:<- :<- :<- :!= :<- :<- :<- :<- :<- :<- :<- :<- :<- :!= :!= :!= :->]
    [:<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :<- :!=]]})

(defn- get-ann-file [ann-filename]
  (let [f (io/file (System/getProperty "user.home") "BPMN" "annotations" ann-filename)]
    (when-not (.exists f) (throw (Exception. (str "Please make sure this file exists: " (.getAbsolutePath f)))))
    (text/read-from-file f)))

(def text-an
  {"Hospital"
   (delay (get-ann-file "HospitalAnn.clj"))

   "Zoo"
   (delay (get-ann-file "ZooAnn.clj"))

   "Dispatch_of_Goods"
   (delay (get-ann-file "Dispatch_of_GoodsAnn.clj"))

   "Credit_scoring"
   (delay (get-ann-file "Credit_scoringAnn.clj"))

   "WebFrontend"
   (delay (get-ann-file "WebFrontendAnn.clj"))

   "Credit_Rating"
   (delay (get-ann-file "CreditRatingAnn.clj"))

   "Hotel"
   (delay (get-ann-file "HotelAnn.clj"))

   "Court_Hearing"
   (delay (get-ann-file "CourtHearingAnn.clj"))

   "Emergency_Hospital"
   (delay (get-ann-file "EmergencyHospitalAnn.clj"))})

(def optional-task-ids
  {"Hospital"
   (into #{} (map str) [2 4 13 16 21 22 23])

   "Zoo"
   (into #{} (map str) [2 4 6 8 9 12 17 18])

   "Dispatch_of_Goods"
   (into #{} (map str) [2 3 6 7])

   "Credit_scoring"
   (into #{} (map str) [6 3 9])

   "WebFrontend"
   (into #{} (map str) [15 5 8 12 14 7 9])

   "Credit_Rating"
   (into #{} (map str) [4 6])

   "Hotel"
   (into #{} (map str) [12, 14, 15])

   "Court_Hearing"
   (into #{} (map str) [2, 4])

   "Emergency_Hospital"
   (into #{} (map str) [1, 17, 4, 12, 5, 10])})

(def roles
  {"Zoo"
   [[{:weight 1.0 :value "customer"} {:weight 1.0 :value "client"} {:weight 1.0 :value "visitor"}]
    [{:weight 1.0 :value "ZooClub"} {:weight 1.0 :value "zooclub"} {:weight 0.2 :value "club"} {:weight 0.3 :value "department"}]
    [{:weight 1.0 :value "marketing"} {:weight 0.3 :value "department"} {:weight 0.2 :value "dpt"} {:weight 0.2 :value "dpt."}]
    [{:weight 1.0 :value "billing"} {:weight 0.3 :value "department"} {:weight 0.3 :value "dpt"} {:weight 0.3 :value "dpt."}]
    [{:weight 1.0 :value "bank"}]]})

(comment

  (def --order-matrix'
    (atom [[:!=	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->]
           [:--	:!=	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->]
           [:--	:--	:!=	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->	:->]
           [:--	:--	:--	:!=	:!=	:!=	:!=	:!=	:!=	:!=	:!=	:!=	:!=	:!=	:!=	:!=	:->]
           [:--	:--	:--	:--	:!=	:->	:->	:||	:||	:||	:->	:->	:->	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:!=	:->	:||	:||	:||	:->	:->	:->	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:--	:!=	:||	:||	:||	:->	:->	:->	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:--	:--	:!=	:||	:->	:->	:->	:->	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:!=	:->	:->	:->	:->	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:--	:!=	:->	:->	:->	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:!=	:->	:->	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:!=	:->	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:!=	:->	:->	:->	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:!=	:!=	:!=	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:!=	:!=	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:!=	:->]
           [:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:--	:!=]]
          ))

  (doseq [i (range (count @--order-matrix'))
          j (range (count @--order-matrix'))
          :when (< j i)
          :let [rel (get-in @--order-matrix' [j i])]]
    (cond
      (= rel :->) (swap! --order-matrix' assoc-in [i j] :<-)
      (= rel :<-) (swap! --order-matrix' assoc-in [i j] :->)
      (= rel :!=) (swap! --order-matrix' assoc-in [i j] :!=)
      (= rel :||) (swap! --order-matrix' assoc-in [i j] :||)))

  END)



(comment
  BEGIN

  (def --text (slurp "/home/josep/ZooAnn.txt"))

  (def --text (slurp "/home/josep/HospitalAnn.txt"))

  (def --text (slurp "/home/josep/Dispatch_of_GoodsAnn.txt"))

  (def --text (slurp "/home/josep/Credit_scoringAnn.txt"))

  (def --text (slurp "/home/josep/WebFrontendAnn.txt"))

  (def --text (slurp "/home/josep/CreditRatingAnn.txt"))

  (def --text (slurp "/home/josep/HotelAnn.txt"))

  (def --text (slurp "/home/josep/CourtHearingAnn.txt"))

  (def --text (slurp "/home/josep/EmergencyHospitalAnn.txt"))

  (def --text-an (text/analyze :text --text :lang "en" :resolve-anaphoras false))

  (map
   (fn [predicate]
     (apply str (:id predicate) " :: " (:words predicate) " " (map #(str (:role %) ": " (:words %) " ") (:arguments predicate))))
   (apply concat (select [:paragraphs ALL :sentences ALL :predicates] --text-an)))


  (def --ids-to-remove #{"P2.1" "P3.1" "P4.1" "P5.1" "P6.1" "P9.1" })

  #_"Emergency_Hospital"
  #_(def --ids-to-remove #{"P2.2" "P4.2" "P5.2" "P7.1" "8.1" "P10.1" "P11.1"})

  (spit "/home/josep/EmergencyHospitalAnn.clj"
        (with-out-str
          (pprint/pprint (setval
                          [:paragraphs ALL :sentences ALL :predicates ALL #(--ids-to-remove (:id %))]
                          NONE
                          --text-an))))


  END)

(comment


  (def --tokens (select [:paragraphs ALL :sentences ALL :tokens]
                        (transform [:paragraphs ALL :sentences ALL :tokens ALL]
                                   #(-> [(:id %) (:form %)])
                                   --text-an)))

  (defn token-ids-csv [tokens]
    (with-open [w (io/writer "/tmp/token-ids.csv")]
      (csv/write-csv
       w
       (mapcat
        (fn [sentence-tokens]
          [(map first sentence-tokens)
           (map second sentence-tokens)
           (repeat (count sentence-tokens) "")])
        tokens))))

  (token-ids-csv --tokens)

  (defmacro tk [id]
    `(select [:paragraphs ALL :sentences ALL :tokens ALL #(= (:id %) ~(name id))] --text-an))

  (defmacro tks [id-start id-end]
    `(select-one (srange-dynamic
                  (fn [coll#]
                    (println coll#)
                    (first (indices-such-that #(= (:id %) ~(name id-start)) coll#)))
                  (fn [coll#]
                    (inc (first (indices-such-that #(= (:id %) ~(name id-end)) coll#)))))
                 (select [:paragraphs ALL :sentences ALL :tokens ALL] --text-an)))

  (keys (-> --text-an :paragraphs first :sentences first))
  (keys (-> --text-an :sentences first :sentences first))
  )
